# This is a basic workflow to help you get started with Actions

name: OpenWRT

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - '*'

jobs:

  build_openwrt:

    name: Build OpenWrt and release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          
      - name: Git clone lede and plugins
        run: |
          git clone https://github.com/coolsnowwolf/lede
          # git clone https://github.com/frainzy1477/luci-app-clash lede/package/lean/luci-app-clash
          git clone -b master https://github.com/vernesong/OpenClash
          cp -R OpenClash/luci-app-openclash lede/package/lean/luci-app-openclash
          cat feeds >> lede/feeds.conf.default
          
      - name: Update feeds
        run: |
          cd lede
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Generate configuration file
        run: |
          cd lede
          rm -f ./.config*
          touch ./.config
          cat ../seed_simple.config > .config
          make defconfig

      
      - name: Make download
        run: |
          cd lede
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
          df -h
          
      - name: Compile firmware
        run: |
          cd lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          
      - name: Prepare artifact
        run: |
          cd lede
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./lede/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./lede/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./lede/bin/targets/
          
          
